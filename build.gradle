buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.google.gms:google-services:4.3.2'
        classpath 'com.android.tools.build:gradle:3.5.0'
    }
}

group = ARTIFACT_PACKAGE

apply plugin: 'com.android.library'
gradle.ext.packaging = "aar"
apply plugin: 'maven-publish'
apply plugin: 'maven'

task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources") //classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

publishToMavenLocal.dependsOn('build')
artifactoryPublish.dependsOn('build')

publishing {
    publications {
        aar(MavenPublication) {
            if (gradle.ext.enableSources)
                artifact androidSourcesJar
            groupId = group
            artifactId = project.getName()
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')

                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return

                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)

                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }

                configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }
    }
}

artifactoryPublish {
    publications(publishing.publications.aar)
}

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionName version
        versionCode gradle.ext.androidVersionCode
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    defaultPublishConfig 'release'

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation project(path: ':ormlite-core')
    implementation 'androidx.loader:loader:1.0.0'
/*
    api 'androidx.legacy:legacy-support-v4:1.0.0'
    api 'androidx.legacy:legacy-support-v13:1.0.0'
    api 'androidx.appcompat:appcompat:1.1.0'
    api 'com.google.android.material:material:1.0.0'
    api 'androidx.vectordrawable:vectordrawable:1.1.0'
    api 'androidx.constraintlayout:constraintlayout:1.1.3'
    api 'com.google.android.gms:play-services-auth:17.0.0'
    api 'com.google.android.gms:play-services-maps:17.0.0'
    api 'com.google.firebase:firebase-messaging:20.0.0'
    api 'com.google.firebase:firebase-core:17.2.0'
*/

    testImplementation 'junit:junit:4.13-beta-3'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

/*
apply plugin: 'java-library'
gradle.ext.packaging = "jar"

description = """ORMLite Android"""

sourceCompatibility = 1.6
targetCompatibility = 1.6

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


configurations {
    compileOnly {
        exclude group: 'javax.persistence-api', module: 'persistence-api'
    }
}

dependencies {
    //compileOnly project(path: ':ormlite-core') // compile group: 'com.j256.ormlite', name: 'ormlite-core', version: '5.2-SNAPSHOT'
    implementation project(path: ':ormlite-core')
    implementation 'androidx.loader:loader:1.0.0'
    implementation 'com.google.android:android:4.1.1.4'
    implementation 'com.google.android:support-v4:r6'

    //testCompile group: 'com.j256.ormlite', name: 'ormlite-core', version: '5.2-SNAPSHOT', classifier: 'tests'
    testCompile project(path: ':ormlite-core', configuration: 'tests')
    testCompile(project(path: ':ormlite-core')) {
        exclude group: 'javax.persistence', module: 'persistence'
    }

    testCompile(group: 'log4j', name: 'log4j', version: '1.2.17') {
        exclude(module: 'jmxri')
        exclude(module: 'jmxtools')
        exclude(module: 'activation')
        exclude(module: 'jms')
        exclude(module: 'mail')
    }
    testCompile group: 'junit', name: 'junit', version: '4.8.1'
    testCompile group: 'org.easymock', name: 'easymock', version: '3.4'
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

publishToMavenLocal.dependsOn('build')
artifactoryPublish.dependsOn('build')
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            if (gradle.ext.enableSources)
                artifact (sourcesJar) {
                    classifier = 'sources'
                }
        }
    }
}
*/
